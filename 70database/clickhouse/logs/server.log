2025.10.28 19:40:15.016872 [ 6716319 ] {} <Information> Application: Will watch for the process with pid 60887
2025.10.28 19:40:15.016810 [ 6716353 ] {} <Information> Application: Forked a child process to watch
2025.10.28 19:40:15.017011 [ 6716353 ] {} <Debug> CrashWriter: Sending crash reports is disabled
2025.10.28 19:40:15.017285 [ 6716353 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 60887
2025.10.28 19:40:15.017532 [ 6716353 ] {} <Information> Application: starting up
2025.10.28 19:40:15.017768 [ 6716353 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.28 19:40:15.096663 [ 6716353 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.28 19:40:15.096678 [ 6716353 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.28 19:40:15.098084 [ 6716353 ] {} <Information> StatusFile: Writing pid 60887 to data/status
2025.10.28 19:40:15.103177 [ 6716353 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.28 19:40:15.103583 [ 6716353 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.28 19:40:15.146326 [ 6716353 ] {} <Debug> Application: Set max number of file descriptors to 4294967295 (was 2560).
2025.10.28 19:40:15.146334 [ 6716353 ] {} <Debug> Application: Set max number of threads to 2000 (was 1333).
2025.10.28 19:40:15.146343 [ 6716353 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.28 19:40:15.147631 [ 6716353 ] {} <Debug> Application: Initializing DateLUT.
2025.10.28 19:40:15.147976 [ 6716353 ] {} <Debug> Application: Initializing interserver credentials.
2025.10.28 19:40:15.148403 [ 6716353 ] {} <Information> Application: Lowered uncompressed cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:40:15.148743 [ 6716353 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:40:15.149011 [ 6716353 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:40:15.149310 [ 6716353 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:40:15.149313 [ 6716353 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:40:15.150872 [ 6716353 ] {} <Debug> FileCacheFactory: Will load 0 caches from default cache config
2025.10.28 19:40:15.151499 [ 6716353 ] {} <Debug> ConfigReloader: Loading config 'config/simple_config.xml'
2025.10.28 19:40:15.151503 [ 6716353 ] {} <Debug> ConfigProcessor: Processing configuration file 'config/simple_config.xml'.
2025.10.28 19:40:15.151862 [ 6716353 ] {} <Debug> ConfigProcessor: Saved preprocessed configuration to 'data/preprocessed_configs/simple_config.xml'.
2025.10.28 19:40:15.151873 [ 6716353 ] {} <Debug> ConfigReloader: Loaded config 'config/simple_config.xml', performing update on configuration
2025.10.28 19:40:15.153039 [ 6716353 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.28 19:40:15.153337 [ 6716353 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.28 19:40:15.153341 [ 6716353 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.28 19:40:15.156786 [ 6716353 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.28 19:40:15.156788 [ 6716353 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.28 19:40:15.156789 [ 6716353 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.28 19:40:15.156789 [ 6716353 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.28 19:40:15.156947 [ 6716353 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.28 19:40:15.157464 [ 6716353 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:40:15.157860 [ 6716353 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:40:15.158104 [ 6716353 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:40:15.160502 [ 6716353 ] {} <Debug> ConfigReloader: Loaded config 'config/simple_config.xml', performed update on configuration
2025.10.28 19:40:15.163019 [ 6716353 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:40:15.163021 [ 6716353 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:40:15.163134 [ 6716353 ] {} <Debug> Context: Setting up _tmp_default:data/tmp/ to store temporary data in it
2025.10.28 19:40:15.173607 [ 6716353 ] {} <Debug> ConfigReloader: Loading config 'config/simple_config.xml'
2025.10.28 19:40:15.173616 [ 6716353 ] {} <Debug> ConfigProcessor: Processing configuration file 'config/simple_config.xml'.
2025.10.28 19:40:15.174310 [ 6716353 ] {} <Debug> ConfigProcessor: Saved preprocessed configuration to 'data/preprocessed_configs/simple_config.xml'.
2025.10.28 19:40:15.174323 [ 6716353 ] {} <Debug> ConfigReloader: Loaded config 'config/simple_config.xml', performing update on configuration
2025.10.28 19:40:15.182714 [ 6716353 ] {} <Debug> ConfigReloader: Loaded config 'config/simple_config.xml', performed update on configuration
2025.10.28 19:40:15.183754 [ 6716353 ] {} <Debug> Access(user directories): Added users_xml access storage 'users_xml', path: config/simple_config.xml
2025.10.28 19:40:15.190124 [ 6716353 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.28 19:40:15.190221 [ 6716353 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.28 19:40:15.190439 [ 6716353 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.28 19:40:15.191031 [ 6716353 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.28 19:40:15.198067 [ 6716353 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.28 19:40:15.198087 [ 6716353 ] {} <Information> Application: Loading metadata from data/
2025.10.28 19:40:15.198147 [ 6716368 ] {BgSchPool::0bbf5bcc-5862-4466-be5c-4f629eca3921} <Debug> DNSResolver: Updating DNS cache
2025.10.28 19:40:15.198504 [ 6716368 ] {BgSchPool::0bbf5bcc-5862-4466-be5c-4f629eca3921} <Debug> DNSResolver: Updated DNS cache
2025.10.28 19:40:15.199112 [ 6716353 ] {} <Information> Context: Database disk name: default
2025.10.28 19:40:15.199117 [ 6716353 ] {} <Information> Context: Database disk name: default, path: data/
2025.10.28 19:40:15.206055 [ 6716365 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 63.48 MiB to 371.11 MiB
2025.10.28 19:40:15.207892 [ 6716353 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path data/
2025.10.28 19:40:15.209810 [ 6716353 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.28 19:40:15.209816 [ 6716353 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.00025075 sec
2025.10.28 19:40:15.210303 [ 6716353 ] {} <Debug> AsyncLoader: Prioritize load job 'startup Atomic database system': BackgrndStartup -> ForegroundLoad
2025.10.28 19:40:15.210305 [ 6716353 ] {} <Debug> AsyncLoader: Prioritize load job 'startup Ordinary database system': BackgrndStartup -> ForegroundLoad
2025.10.28 19:40:15.210308 [ 6716353 ] {} <Debug> AsyncLoader: Schedule load job 'startup Ordinary database system' into ForegroundLoad
2025.10.28 19:40:15.210317 [ 6716353 ] {} <Debug> AsyncLoader: Schedule load job 'startup Atomic database system' into ForegroundLoad
2025.10.28 19:40:15.210319 [ 6716353 ] {} <Debug> AsyncLoader: Change current priority: none -> 0
2025.10.28 19:40:15.210320 [ 6716353 ] {} <Debug> AsyncLoader: Spawn loader worker #1 in ForegroundLoad
2025.10.28 19:40:15.210351 [ 6716353 ] {} <Debug> AsyncLoader: Wait load job 'startup Atomic database system' in ForegroundLoad
2025.10.28 19:40:15.210413 [ 6716999 ] {} <Debug> AsyncLoader: Execute load job 'startup Ordinary database system' in ForegroundLoad
2025.10.28 19:40:15.210586 [ 6716999 ] {} <Debug> AsyncLoader: Finish load job 'startup Ordinary database system' with status OK
2025.10.28 19:40:15.210596 [ 6716999 ] {} <Debug> AsyncLoader: Spawn loader worker #2 in ForegroundLoad
2025.10.28 19:40:15.210612 [ 6716999 ] {} <Debug> AsyncLoader: Execute load job 'startup Atomic database system' in ForegroundLoad
2025.10.28 19:40:15.210646 [ 6717000 ] {} <Debug> AsyncLoader: Stop worker in ForegroundLoad
2025.10.28 19:40:15.210688 [ 6716999 ] {} <Debug> AsyncLoader: Finish load job 'startup Atomic database system' with status OK
2025.10.28 19:40:15.210690 [ 6716999 ] {} <Debug> AsyncLoader: Stop worker in ForegroundLoad
2025.10.28 19:40:15.210692 [ 6716999 ] {} <Debug> AsyncLoader: Change current priority: 0 -> none
2025.10.28 19:40:15.211402 [ 6716353 ] {} <Debug> SystemLog: Not creating system.query_log since corresponding section 'query_log' is missing from config
2025.10.28 19:40:15.211948 [ 6716353 ] {} <Debug> SystemLog: Not creating system.query_thread_log since corresponding section 'query_thread_log' is missing from config
2025.10.28 19:40:15.212351 [ 6716353 ] {} <Debug> SystemLog: Not creating system.part_log since corresponding section 'part_log' is missing from config
2025.10.28 19:40:15.212394 [ 6716353 ] {} <Debug> SystemLog: Not creating system.trace_log since corresponding section 'trace_log' is missing from config
2025.10.28 19:40:15.212429 [ 6716353 ] {} <Debug> SystemLog: Not creating system.crash_log since corresponding section 'crash_log' is missing from config
2025.10.28 19:40:15.212562 [ 6716353 ] {} <Debug> SystemLog: Not creating system.text_log since corresponding section 'text_log' is missing from config
2025.10.28 19:40:15.212564 [ 6716353 ] {} <Debug> SystemLog: Not creating system.metric_log since corresponding section 'metric_log' is missing from config
2025.10.28 19:40:15.212630 [ 6716353 ] {} <Debug> SystemLog: Not creating system.transposed_metric_log since corresponding section 'transposed_metric_log' is missing from config
2025.10.28 19:40:15.212903 [ 6716353 ] {} <Debug> SystemLog: Not creating system.error_log since corresponding section 'error_log' is missing from config
2025.10.28 19:40:15.212946 [ 6716353 ] {} <Debug> SystemLog: Not creating system.filesystem_cache_log since corresponding section 'filesystem_cache_log' is missing from config
2025.10.28 19:40:15.212959 [ 6716353 ] {} <Debug> SystemLog: Not creating system.filesystem_read_prefetches_log since corresponding section 'filesystem_read_prefetches_log' is missing from config
2025.10.28 19:40:15.213010 [ 6716353 ] {} <Debug> SystemLog: Not creating system.s3queue_log since corresponding section 's3queue_log' is missing from config
2025.10.28 19:40:15.213012 [ 6716353 ] {} <Debug> SystemLog: Not creating system.azure_queue_log since corresponding section 'azure_queue_log' is missing from config
2025.10.28 19:40:15.213027 [ 6716353 ] {} <Debug> SystemLog: Not creating system.asynchronous_metric_log since corresponding section 'asynchronous_metric_log' is missing from config
2025.10.28 19:40:15.213072 [ 6716353 ] {} <Debug> SystemLog: Not creating system.opentelemetry_span_log since corresponding section 'opentelemetry_span_log' is missing from config
2025.10.28 19:40:15.213074 [ 6716353 ] {} <Debug> SystemLog: Not creating system.query_views_log since corresponding section 'query_views_log' is missing from config
2025.10.28 19:40:15.213087 [ 6716353 ] {} <Debug> SystemLog: Not creating system.zookeeper_log since corresponding section 'zookeeper_log' is missing from config
2025.10.28 19:40:15.213133 [ 6716353 ] {} <Debug> SystemLog: Not creating system.session_log since corresponding section 'session_log' is missing from config
2025.10.28 19:40:15.213151 [ 6716353 ] {} <Debug> SystemLog: Not creating system.transactions_info_log since corresponding section 'transactions_info_log' is missing from config
2025.10.28 19:40:15.213197 [ 6716353 ] {} <Debug> SystemLog: Not creating system.processors_profile_log since corresponding section 'processors_profile_log' is missing from config
2025.10.28 19:40:15.213210 [ 6716353 ] {} <Debug> SystemLog: Not creating system.asynchronous_insert_log since corresponding section 'asynchronous_insert_log' is missing from config
2025.10.28 19:40:15.213253 [ 6716353 ] {} <Debug> SystemLog: Not creating system.backup_log since corresponding section 'backup_log' is missing from config
2025.10.28 19:40:15.213256 [ 6716353 ] {} <Debug> SystemLog: Not creating system.blob_storage_log since corresponding section 'blob_storage_log' is missing from config
2025.10.28 19:40:15.213268 [ 6716353 ] {} <Debug> SystemLog: Not creating system.query_metric_log since corresponding section 'query_metric_log' is missing from config
2025.10.28 19:40:15.213313 [ 6716353 ] {} <Debug> SystemLog: Not creating system.dead_letter_queue since corresponding section 'dead_letter_queue' is missing from config
2025.10.28 19:40:15.213329 [ 6716353 ] {} <Debug> SystemLog: Not creating system.zookeeper_connection_log since corresponding section 'zookeeper_connection_log' is missing from config
2025.10.28 19:40:15.213374 [ 6716353 ] {} <Debug> SystemLog: Not creating system.aggregated_zookeeper_log since corresponding section 'aggregated_zookeeper_log' is missing from config
2025.10.28 19:40:15.213387 [ 6716353 ] {} <Debug> SystemLog: Not creating system.iceberg_metadata_log since corresponding section 'iceberg_metadata_log' is missing from config
2025.10.28 19:40:15.215387 [ 6716353 ] {} <Debug> DatabaseAtomic (system): Creating directory symlink, path_to_metadata_symlink: metadata/system, metadata_path: store/f03/f03c2ca3-d92d-412f-a75f-71e3784bdc75/
2025.10.28 19:40:15.241931 [ 6716353 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path data/
2025.10.28 19:40:15.242264 [ 6716353 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.28 19:40:15.242268 [ 6716353 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 8.792e-06 sec
2025.10.28 19:40:15.242283 [ 6716353 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.28 19:40:15.242287 [ 6716353 ] {} <Debug> AsyncLoader: Schedule load job 'startup Ordinary database default' into BackgrndStartup
2025.10.28 19:40:15.242288 [ 6716353 ] {} <Debug> AsyncLoader: Schedule load job 'startup Atomic database default' into BackgrndStartup
2025.10.28 19:40:15.242290 [ 6716353 ] {} <Debug> AsyncLoader: Change current priority: none -> 2
2025.10.28 19:40:15.242291 [ 6716353 ] {} <Debug> AsyncLoader: Spawn loader worker #1 in BackgrndStartup
2025.10.28 19:40:15.242338 [ 6717000 ] {} <Debug> AsyncLoader: Execute load job 'startup Ordinary database default' in BackgrndStartup
2025.10.28 19:40:15.242351 [ 6717000 ] {} <Debug> AsyncLoader: Finish load job 'startup Ordinary database default' with status OK
2025.10.28 19:40:15.242356 [ 6717000 ] {} <Debug> AsyncLoader: Spawn loader worker #2 in BackgrndStartup
2025.10.28 19:40:15.242373 [ 6716353 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.28 19:40:15.242376 [ 6716353 ] {} <Debug> UserDefinedSQLObjectsLoaderFromDisk: The directory for user defined objects (/Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/) does not exist: nothing to load
2025.10.28 19:40:15.242386 [ 6717000 ] {} <Debug> AsyncLoader: Execute load job 'startup Atomic database default' in BackgrndStartup
2025.10.28 19:40:15.242389 [ 6717000 ] {} <Debug> AsyncLoader: Finish load job 'startup Atomic database default' with status OK
2025.10.28 19:40:15.242390 [ 6717000 ] {} <Debug> AsyncLoader: Stop worker in BackgrndStartup
2025.10.28 19:40:15.242399 [ 6717000 ] {} <Debug> AsyncLoader: Stop worker in BackgrndStartup
2025.10.28 19:40:15.242404 [ 6717000 ] {} <Debug> AsyncLoader: Change current priority: 2 -> none
2025.10.28 19:40:15.242415 [ 6716353 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.28 19:40:15.242417 [ 6716353 ] {} <Debug> WorkloadEntityDiskStorage: The directory for workload entities (/Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/) does not exist: nothing to load
2025.10.28 19:40:15.242418 [ 6716353 ] {} <Debug> Application: Loaded metadata.
2025.10.28 19:40:15.242419 [ 6716353 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.28 19:40:15.247400 [ 6716353 ] {} <Information> Application: Stopping AsyncLoader.
2025.10.28 19:40:15.248105 [ 6716353 ] {} <Information> Application: Shutting down storages.
2025.10.28 19:40:15.248300 [ 6716353 ] {} <Debug> Context: Shutting down another UDFs storage
2025.10.28 19:40:15.248301 [ 6716353 ] {} <Debug> Context: Shutting down workload entity storage
2025.10.28 19:40:15.248733 [ 6716353 ] {} <Debug> ObjectStorageQueueFactory: There are no queue storages to shutdown
2025.10.28 19:40:15.249046 [ 6716353 ] {} <Debug> Context: Shutting down system logs
2025.10.28 19:40:15.249736 [ 6716353 ] {} <Debug> Context: Shutting down merges executor
2025.10.28 19:40:15.249954 [ 6716353 ] {} <Debug> Context: Shutting down fetches executor
2025.10.28 19:40:15.250062 [ 6716353 ] {} <Debug> Context: Shutting down moves executor
2025.10.28 19:40:15.250136 [ 6716353 ] {} <Debug> Context: Shutting down common executor
2025.10.28 19:40:15.250218 [ 6716353 ] {} <Information> Context: Shutdown disk default
2025.10.28 19:40:15.260061 [ 6716353 ] {} <Debug> Application: Shut down storages.
2025.10.28 19:40:15.260917 [ 6716353 ] {} <Debug> Application: Destroyed global context.
2025.10.28 19:40:15.260931 [ 6716353 ] {} <Information> Application: Waiting for background threads
2025.10.28 19:40:15.292299 [ 6716353 ] {} <Information> Application: Background threads finished in 31 ms
2025.10.28 19:40:15.467385 [ 6716353 ] {} <Error> Application: Code: 210. DB::Exception: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 48, Net Exception: Address already in use: [::]:8123 (version 25.9.4.58 (official build)). (NETWORK_ERROR), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001118563bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000001062f352c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000100eda4d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000100eda0e8
4. DB::Exception::Exception<String const&, int&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<int&>::type, std::type_identity<String>::type>, String const&, int&, String&&) @ 0x0000000106653f04
5. DB::Server::createServer(Poco::Util::AbstractConfiguration&, String const&, char const*, bool, bool, std::vector<DB::ProtocolServerAdapter, std::allocator<DB::ProtocolServerAdapter>>&, std::function<DB::ProtocolServerAdapter (unsigned short)>&&) const @ 0x0000000106730dfc
6. DB::Server::createServers(Poco::Util::AbstractConfiguration&, std::vector<String, std::allocator<String>> const&, bool, Poco::ThreadPool&, DB::AsynchronousMetrics&, std::vector<DB::ProtocolServerAdapter, std::allocator<DB::ProtocolServerAdapter>>&, bool, DB::ServerType const&) @ 0x000000010674a7e0
7. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000106740090
8. Poco::Util::Application::run() @ 0x000000011194e8bc
9. DB::Server::run() @ 0x0000000106731560
10. mainEntryClickHouseServer(int, char**) @ 0x000000010672eec8
11. main @ 0x0000000100ed381c
12. start @ 0x0000000185e45d54
 (version 25.9.4.58 (official build))
2025.10.28 19:40:15.467789 [ 6716353 ] {} <Information> Application: shutting down
2025.10.28 19:40:15.467794 [ 6716353 ] {} <Debug> Application: Uninitializing subsystem: Logging Subsystem
2025.10.28 19:40:15.468910 [ 6716358 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.28 19:42:25.239187 [ 6719511 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 61171
2025.10.28 19:42:25.239331 [ 6719511 ] {} <Information> Application: starting up
2025.10.28 19:42:25.239515 [ 6719511 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.28 19:42:25.311784 [ 6719511 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.28 19:42:25.311792 [ 6719511 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.28 19:42:25.314596 [ 6719511 ] {} <Information> StatusFile: Writing pid 61171 to ./data/status
2025.10.28 19:42:25.320002 [ 6719511 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.28 19:42:25.320495 [ 6719511 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.28 19:42:25.335816 [ 6719511 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.28 19:42:25.336454 [ 6719511 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:42:25.336881 [ 6719511 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:42:25.337160 [ 6719511 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:42:25.337164 [ 6719511 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.28 19:42:25.340649 [ 6719511 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.28 19:42:25.340878 [ 6719511 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.28 19:42:25.340882 [ 6719511 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.28 19:42:25.342537 [ 6719511 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.28 19:42:25.342540 [ 6719511 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.28 19:42:25.342541 [ 6719511 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.28 19:42:25.342542 [ 6719511 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.28 19:42:25.342743 [ 6719511 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.28 19:42:25.342917 [ 6719511 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:42:25.343121 [ 6719511 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:42:25.344095 [ 6719511 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.28 19:42:25.346370 [ 6719511 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:42:25.346375 [ 6719511 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:42:25.355787 [ 6719511 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.28 19:42:25.355885 [ 6719511 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.28 19:42:25.356125 [ 6719511 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.28 19:42:25.356312 [ 6719511 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.28 19:42:25.358324 [ 6719511 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.28 19:42:25.358334 [ 6719511 ] {} <Information> Application: Loading metadata from ./data/
2025.10.28 19:42:25.359075 [ 6719511 ] {} <Information> Context: Database disk name: default
2025.10.28 19:42:25.359081 [ 6719511 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.28 19:42:25.364750 [ 6719511 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.28 19:42:25.367339 [ 6719511 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.28 19:42:25.367346 [ 6719511 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.00086775 sec
2025.10.28 19:42:25.400747 [ 6719511 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.28 19:42:25.400776 [ 6719511 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.28 19:42:25.400780 [ 6719511 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 1.2584e-05 sec
2025.10.28 19:42:25.400796 [ 6719511 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.28 19:42:25.400928 [ 6719511 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.28 19:42:25.400970 [ 6719511 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.28 19:42:25.400975 [ 6719511 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.28 19:42:25.402833 [ 6719511 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:42:25.402838 [ 6719511 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.28 19:42:25.404770 [ 6719511 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.28 19:42:25.404790 [ 6719511 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.28 19:42:25.404791 [ 6719511 ] {} <Information> Application: Ready for connections.
2025.10.28 19:42:25.424189 [ 6719661 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 72.71 MiB to 381.06 MiB
2025.10.28 19:44:53.987181 [ 6719658 ] {51ae48e3-4f90-4293-9bdc-35958105ebc6} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.28 19:44:53.989302 [ 6719658 ] {51ae48e3-4f90-4293-9bdc-35958105ebc6} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.28 19:44:53.989459 [ 6719658 ] {51ae48e3-4f90-4293-9bdc-35958105ebc6} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.0007095 sec
2025.10.29 00:35:03.412510 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:04.525491 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:06.031013 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:07.572203 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:09.469276 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:10.235324 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:10.855770 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:35:12.236137 [ 6719659 ] {} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database argocapital does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114d823bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010981f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001044064d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001044060e8
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000104405d7c
5. DB::DatabaseCatalog::assertDatabaseExists(String const&) const @ 0x000000010e07fa68
6. DB::Context::setCurrentDatabaseWithLock(String const&, std::lock_guard<DB::ContextSharedMutex> const&) @ 0x000000010dfe97bc
7. DB::Context::setCurrentDatabase(String const&) @ 0x000000010dff5228
8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e330c
9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000001113e8f20
10. DB::HTTPServerConnection::run() @ 0x000000011148e1ec
11. Poco::Net::TCPServerConnection::start() @ 0x0000000114e51518
12. Poco::Net::TCPServerDispatcher::run() @ 0x0000000114e51bf8
13. Poco::PooledThread::run() @ 0x0000000114df1fc8
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000114def128
15. _pthread_start @ 0x0000000186204c08
16. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 00:37:41.409143 [ 6719658 ] {7d1277e9-f674-4e17-9cb5-af34b0569ea1} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 00:37:41.410083 [ 6719658 ] {7d1277e9-f674-4e17-9cb5-af34b0569ea1} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 00:37:41.410230 [ 6719658 ] {7d1277e9-f674-4e17-9cb5-af34b0569ea1} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000117708 sec
2025.10.29 00:44:10.432164 [ 6719659 ] {3c7e4e0b-81e6-41ec-9d4d-24646e8350da} <Information> argocapital.marketdata (46fb43ad-9332-4103-ba04-8a3be2c6bee5): Remove 2 parts by covering them with empty 2 parts. With txn (1, 1, 00000000-0000-0000-0000-000000000000).
2025.10.29 00:44:10.434979 [ 6719659 ] {3c7e4e0b-81e6-41ec-9d4d-24646e8350da} <Information> argocapital.marketdata (46fb43ad-9332-4103-ba04-8a3be2c6bee5): Truncated table with 2 parts by replacing them with new empty 2 parts. With txn (1, 1, 00000000-0000-0000-0000-000000000000)
2025.10.29 11:57:15.533706 [ 6719646 ] {} <Information> Application: Received termination signal (Terminated: 15)
2025.10.29 11:57:15.973304 [ 6719511 ] {} <Information> Application: Closed all listening sockets.
2025.10.29 11:57:15.973506 [ 6719511 ] {} <Information> Application: Closed connections.
2025.10.29 11:57:15.974146 [ 6719511 ] {} <Information> Application: Stopping AsyncLoader.
2025.10.29 11:57:15.979722 [ 6719511 ] {} <Information> Application: Shutting down storages.
2025.10.29 11:57:16.131734 [ 6719511 ] {} <Information> Context: Shutdown disk default
2025.10.29 11:57:16.196422 [ 6719511 ] {} <Information> Application: Waiting for background threads
2025.10.29 11:57:16.267467 [ 6719511 ] {} <Information> Application: Background threads finished in 70 ms
2025.10.29 11:57:16.274015 [ 6719511 ] {} <Information> Application: shutting down
2025.10.29 11:57:16.276554 [ 6719646 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 12:02:29.278121 [ 7286865 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 97261
2025.10.29 12:02:29.278418 [ 7286865 ] {} <Information> Application: starting up
2025.10.29 12:02:29.278637 [ 7286865 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 12:02:29.357023 [ 7286865 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 12:02:29.357042 [ 7286865 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 12:02:29.360603 [ 7286865 ] {} <Information> StatusFile: Writing pid 97261 to ./data/status
2025.10.29 12:02:29.365418 [ 7286865 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.29 12:02:29.365943 [ 7286865 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.29 12:02:29.398068 [ 7286865 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.29 12:02:29.400742 [ 7286865 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 12:02:29.401542 [ 7286865 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 12:02:29.401869 [ 7286865 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 12:02:29.401874 [ 7286865 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 12:02:29.408753 [ 7286865 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.29 12:02:29.409097 [ 7286865 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.29 12:02:29.409101 [ 7286865 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.29 12:02:29.412545 [ 7286865 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.29 12:02:29.412556 [ 7286865 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.29 12:02:29.412557 [ 7286865 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.29 12:02:29.412558 [ 7286865 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.29 12:02:29.412900 [ 7286865 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.29 12:02:29.413530 [ 7286865 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 12:02:29.413883 [ 7286865 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 12:02:29.414087 [ 7286865 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 12:02:29.420836 [ 7286865 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 12:02:29.420844 [ 7286865 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 12:02:29.436426 [ 7286865 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.29 12:02:29.436534 [ 7286865 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.29 12:02:29.437054 [ 7286865 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.29 12:02:29.437186 [ 7286865 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.29 12:02:29.438742 [ 7286865 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.29 12:02:29.438751 [ 7286865 ] {} <Information> Application: Loading metadata from ./data/
2025.10.29 12:02:29.439856 [ 7286865 ] {} <Information> Context: Database disk name: default
2025.10.29 12:02:29.439869 [ 7286865 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.29 12:02:29.448576 [ 7286865 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.29 12:02:29.451977 [ 7286865 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 12:02:29.451990 [ 7286865 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000531792 sec
2025.10.29 12:02:29.471761 [ 7286900 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 68.03 MiB to 377.50 MiB
2025.10.29 12:02:29.494423 [ 7286865 ] {} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.29 12:02:29.494720 [ 7286865 ] {} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 12:02:29.495070 [ 7286865 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.29 12:02:29.497423 [ 7286865 ] {} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 12:02:29.498835 [ 7286865 ] {} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 12:02:29.498864 [ 7286865 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 12:02:29.498874 [ 7286865 ] {} <Information> TablesLoader: Parsed metadata of 8 tables in 3 databases in 0.003784709 sec
2025.10.29 12:02:29.499454 [ 7286865 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.29 12:02:29.500057 [ 7286865 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.29 12:02:29.500133 [ 7286865 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.29 12:02:29.500137 [ 7286865 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.29 12:02:29.502300 [ 7286865 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 12:02:29.502311 [ 7286865 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 12:02:29.504988 [ 7286865 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.29 12:02:29.505084 [ 7286865 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.29 12:02:29.505088 [ 7286865 ] {} <Information> Application: Ready for connections.
2025.10.29 12:02:45.828731 [ 7287989 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 97342
2025.10.29 12:02:45.828743 [ 7287989 ] {} <Information> Application: starting up
2025.10.29 12:02:45.828762 [ 7287989 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 12:02:45.833657 [ 7287989 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 12:02:45.833665 [ 7287989 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 12:02:45.834656 [ 7287989 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 97261
Started at: 2025-10-29 12:02:29
Revision: 54505

2025.10.29 12:02:45.837900 [ 7287989 ] {} <Information> Application: Shutting down storages.
2025.10.29 12:02:45.838491 [ 7287989 ] {} <Information> Application: Waiting for background threads
2025.10.29 12:02:45.838642 [ 7287989 ] {} <Information> Application: Background threads finished in 0 ms
2025.10.29 12:02:46.014913 [ 7287989 ] {} <Error> Application: Code: 76. DB::Exception: Cannot lock file ./data/status. Another server instance in same directory is already running. (CANNOT_OPEN_FILE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000110cde3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010577b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001003624d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001003620e8
4. DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x0000000100fe847c
5. DB::StatusFile::StatusFile(String, std::function<void (DB::WriteBuffer&)>) @ 0x0000000105897258
6. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000105bbf6bc
7. Poco::Util::Application::run() @ 0x0000000110dd68bc
8. DB::Server::run() @ 0x0000000105bb9560
9. mainEntryClickHouseServer(int, char**) @ 0x0000000105bb6ec8
10. main @ 0x000000010035b81c
11. start @ 0x0000000185e45d54
 (version 25.9.4.58 (official build))
2025.10.29 12:02:46.015102 [ 7287989 ] {} <Information> Application: shutting down
2025.10.29 12:02:46.015131 [ 7288006 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 12:03:16.387092 [ 7288788 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 97450
2025.10.29 12:03:16.387108 [ 7288788 ] {} <Information> Application: starting up
2025.10.29 12:03:16.387128 [ 7288788 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 12:03:16.392423 [ 7288788 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 12:03:16.392435 [ 7288788 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 12:03:16.392781 [ 7288788 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 97261
Started at: 2025-10-29 12:02:29
Revision: 54505

2025.10.29 12:03:16.392884 [ 7288788 ] {} <Information> Application: Shutting down storages.
2025.10.29 12:03:16.392924 [ 7288788 ] {} <Information> Application: Waiting for background threads
2025.10.29 12:03:16.392929 [ 7288788 ] {} <Information> Application: Background threads finished in 0 ms
2025.10.29 12:03:16.419772 [ 7288788 ] {} <Error> Application: Code: 76. DB::Exception: Cannot lock file ./data/status. Another server instance in same directory is already running. (CANNOT_OPEN_FILE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114c3a3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000001096d752c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001042be4d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001042be0e8
4. DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x0000000104f4447c
5. DB::StatusFile::StatusFile(String, std::function<void (DB::WriteBuffer&)>) @ 0x00000001097f3258
6. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000109b1b6bc
7. Poco::Util::Application::run() @ 0x0000000114d328bc
8. DB::Server::run() @ 0x0000000109b15560
9. mainEntryClickHouseServer(int, char**) @ 0x0000000109b12ec8
10. main @ 0x00000001042b781c
11. start @ 0x0000000185e45d54
 (version 25.9.4.58 (official build))
2025.10.29 12:03:16.419800 [ 7288788 ] {} <Information> Application: shutting down
2025.10.29 12:03:16.419857 [ 7288796 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 13:13:04.254079 [ 7286898 ] {316cd869-847e-46d1-a88c-5e1f0932c0d3} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:04.255489 [ 7286898 ] {316cd869-847e-46d1-a88c-5e1f0932c0d3} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:13:14.273221 [ 7286898 ] {220f97ab-57a2-405b-b260-590e87f0d806} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:14.273443 [ 7286898 ] {220f97ab-57a2-405b-b260-590e87f0d806} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:13:24.283593 [ 7286898 ] {79a47501-9e1b-461a-b452-bae706d08208} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:24.283796 [ 7286898 ] {79a47501-9e1b-461a-b452-bae706d08208} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:13:34.474494 [ 7286898 ] {1ad88bfb-e9a8-4c98-a70b-58bfa4e75cda} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:34.496548 [ 7286898 ] {1ad88bfb-e9a8-4c98-a70b-58bfa4e75cda} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:13:44.544351 [ 7286898 ] {4cde3933-4dd8-434e-8f54-1f695757660d} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:44.544752 [ 7286898 ] {4cde3933-4dd8-434e-8f54-1f695757660d} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:13:54.556023 [ 7286898 ] {a32c025f-97f6-49e5-ad79-858019da3db8} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:13:54.556325 [ 7286898 ] {a32c025f-97f6-49e5-ad79-858019da3db8} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:04.562376 [ 7286898 ] {3594c2f9-459a-45a8-bc3d-c6acb2b09aaa} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:04.562584 [ 7286898 ] {3594c2f9-459a-45a8-bc3d-c6acb2b09aaa} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:14.497071 [ 7286898 ] {0a29ae22-600f-41b1-8e45-7218ea666d3b} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:14.497193 [ 7286898 ] {0a29ae22-600f-41b1-8e45-7218ea666d3b} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:24.511636 [ 7286898 ] {67618d5b-65fb-4117-8a25-1fac96bc5fb9} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:24.511955 [ 7286898 ] {67618d5b-65fb-4117-8a25-1fac96bc5fb9} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:34.525095 [ 7286898 ] {e848aa27-086a-4463-a111-2917decd504a} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:34.525287 [ 7286898 ] {e848aa27-086a-4463-a111-2917decd504a} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:44.542895 [ 7286898 ] {c4f48bf8-230d-4949-ab5e-13b6b8fd3479} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:44.543443 [ 7286898 ] {c4f48bf8-230d-4949-ab5e-13b6b8fd3479} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:14:54.553964 [ 7286898 ] {3907fdd3-f858-4f0c-9871-a719463f54ff} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:14:54.554271 [ 7286898 ] {3907fdd3-f858-4f0c-9871-a719463f54ff} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:15:04.571764 [ 7286898 ] {542e76bc-3ef7-4de3-9aee-90b489833d67} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:15:04.572077 [ 7286898 ] {542e76bc-3ef7-4de3-9aee-90b489833d67} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:15:14.594936 [ 7286898 ] {a50bd73a-355d-41b5-95cb-5d79e102dd62} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER) (version 25.9.4.58 (official build)) (from 127.0.0.1:60366) (in query:  SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE action IN ('BUY', 'SELL') AND confidence >= 0.75 AND timestamp > now() - INTERVAL 30 MINUTE ORDER BY timestamp DESC, confidence DESC LIMIT 5 FORMAT Native), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8

2025.10.29 13:15:14.595596 [ 7286898 ] {a50bd73a-355d-41b5-95cb-5d79e102dd62} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `action` in scope SELECT timestamp, symbol, action, confidence FROM tradingsignals WHERE (action IN ('BUY', 'SELL')) AND (confidence >= 0.75) AND (timestamp > (now() - toIntervalMinute(30))) ORDER BY timestamp DESC, confidence DESC LIMIT 5. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001158fe3bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010a39b52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000104f824d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000104f820e8
4. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000010e6bec4c
5. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010e6a9a5c
6. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000010e6a7d6c
7. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010e6c0174
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010e6a39ac
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2cb0
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010e6a2320
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010e61077c
12. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ed6f85c
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ed6e060
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ed712a4
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010ed267ec
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000010f0c0754
17. DB::executeQuery(std::unique_ptr<DB::ReadBuffer, std::default_delete<DB::ReadBuffer>>, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x000000010f0c4fa0
18. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f61830
19. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000111f64f20
20. DB::HTTPServerConnection::run() @ 0x000000011200a1ec
21. Poco::Net::TCPServerConnection::start() @ 0x00000001159cd518
22. Poco::Net::TCPServerDispatcher::run() @ 0x00000001159cdbf8
23. Poco::PooledThread::run() @ 0x000000011596dfc8
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000011596b128
25. _pthread_start @ 0x0000000186204c08
26. thread_start @ 0x00000001861ffba8
 (version 25.9.4.58 (official build))
2025.10.29 13:43:14.697318 [ 7286896 ] {} <Information> Application: Received termination signal (Terminated: 15)
2025.10.29 13:43:15.126415 [ 7286865 ] {} <Warning> Application: Closed all listening sockets. Waiting for 2 outstanding connections.
2025.10.29 13:43:20.175727 [ 7286865 ] {} <Warning> Application: Closed connections. But 1 remain. Tip: To increase wait time add to config: <shutdown_wait_unfinished>60</shutdown_wait_unfinished>
2025.10.29 13:43:20.178541 [ 7286865 ] {} <Warning> Application: Will shutdown forcefully.
2025.10.29 13:52:59.738568 [ 7882915 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 70194
2025.10.29 13:52:59.738738 [ 7882915 ] {} <Information> Application: starting up
2025.10.29 13:52:59.738925 [ 7882915 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 13:52:59.827960 [ 7882915 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 13:52:59.827970 [ 7882915 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 13:52:59.831795 [ 7882915 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 97261
Started at: 2025-10-29 12:02:29
Revision: 54505

2025.10.29 13:52:59.832021 [ 7882915 ] {} <Information> StatusFile: Writing pid 70194 to ./data/status
2025.10.29 13:52:59.838519 [ 7882915 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.29 13:52:59.839059 [ 7882915 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.29 13:52:59.870011 [ 7882915 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.29 13:52:59.873343 [ 7882915 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 13:52:59.873805 [ 7882915 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 13:52:59.874179 [ 7882915 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 13:52:59.874186 [ 7882915 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 13:52:59.880728 [ 7882915 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.29 13:52:59.881084 [ 7882915 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.29 13:52:59.881088 [ 7882915 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.29 13:52:59.883976 [ 7882915 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.29 13:52:59.883984 [ 7882915 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.29 13:52:59.883985 [ 7882915 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.29 13:52:59.883986 [ 7882915 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.29 13:52:59.884346 [ 7882915 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.29 13:52:59.884647 [ 7882915 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 13:52:59.885312 [ 7882915 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 13:52:59.885759 [ 7882915 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 13:52:59.890961 [ 7882915 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 13:52:59.891032 [ 7882915 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 13:52:59.906021 [ 7882915 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.29 13:52:59.906361 [ 7882915 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.29 13:52:59.906605 [ 7882915 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.29 13:52:59.907227 [ 7882915 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.29 13:52:59.912324 [ 7882915 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.29 13:52:59.912339 [ 7882915 ] {} <Information> Application: Loading metadata from ./data/
2025.10.29 13:52:59.916678 [ 7882915 ] {} <Information> Context: Database disk name: default
2025.10.29 13:52:59.916687 [ 7882915 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.29 13:52:59.921932 [ 7882915 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.29 13:52:59.923447 [ 7882915 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 13:52:59.923454 [ 7882915 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000301375 sec
2025.10.29 13:52:59.942633 [ 7882938 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 68.03 MiB to 377.52 MiB
2025.10.29 13:52:59.966285 [ 7882915 ] {} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.29 13:52:59.966491 [ 7882915 ] {} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 13:52:59.966802 [ 7882915 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.29 13:52:59.969896 [ 7882915 ] {} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 13:52:59.971970 [ 7882915 ] {} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 13:52:59.971978 [ 7882915 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 13:52:59.971981 [ 7882915 ] {} <Information> TablesLoader: Parsed metadata of 8 tables in 3 databases in 0.005170667 sec
2025.10.29 13:52:59.972427 [ 7882915 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.29 13:52:59.993104 [ 7882915 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.29 13:52:59.993229 [ 7882915 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.29 13:52:59.993237 [ 7882915 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.29 13:52:59.995688 [ 7882915 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 13:52:59.995693 [ 7882915 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 13:53:00.002827 [ 7882915 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.29 13:53:00.002841 [ 7882915 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.29 13:53:00.002842 [ 7882915 ] {} <Information> Application: Ready for connections.
2025.10.29 14:00:37.290386 [ 7882929 ] {} <Information> Application: Received termination signal (Interrupt: 2)
2025.10.29 14:00:37.409361 [ 7882929 ] {} <Information> Application: Received termination signal (Interrupt: 2)
2025.10.29 14:00:37.409408 [ 7882929 ] {} <Information> Application: This is the second termination signal. Immediately terminate.
2025.10.29 14:02:16.780546 [ 7893103 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 70913
2025.10.29 14:02:16.780936 [ 7893103 ] {} <Information> Application: starting up
2025.10.29 14:02:16.781577 [ 7893103 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 14:02:16.862406 [ 7893103 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 14:02:16.862414 [ 7893103 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 14:02:16.865430 [ 7893103 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 70194
Started at: 2025-10-29 13:52:59
Revision: 54505

2025.10.29 14:02:16.865568 [ 7893103 ] {} <Information> StatusFile: Writing pid 70913 to ./data/status
2025.10.29 14:02:16.871956 [ 7893103 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.29 14:02:16.872490 [ 7893103 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.29 14:02:16.899603 [ 7893103 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.29 14:02:16.900353 [ 7893103 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 14:02:16.901231 [ 7893103 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 14:02:16.901772 [ 7893103 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 14:02:16.901784 [ 7893103 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 14:02:16.908969 [ 7893103 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.29 14:02:16.909301 [ 7893103 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.29 14:02:16.909304 [ 7893103 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.29 14:02:16.912908 [ 7893103 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.29 14:02:16.912915 [ 7893103 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.29 14:02:16.912916 [ 7893103 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.29 14:02:16.912916 [ 7893103 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.29 14:02:16.913343 [ 7893103 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.29 14:02:16.913718 [ 7893103 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 14:02:16.914175 [ 7893103 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 14:02:16.914699 [ 7893103 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 14:02:16.917713 [ 7893103 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 14:02:16.917718 [ 7893103 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 14:02:16.936979 [ 7893103 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.29 14:02:16.937044 [ 7893103 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.29 14:02:16.937445 [ 7893103 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.29 14:02:16.937604 [ 7893103 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.29 14:02:16.939632 [ 7893103 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.29 14:02:16.939658 [ 7893103 ] {} <Information> Application: Loading metadata from ./data/
2025.10.29 14:02:16.940912 [ 7893103 ] {} <Information> Context: Database disk name: default
2025.10.29 14:02:16.940917 [ 7893103 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.29 14:02:16.951606 [ 7893103 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.29 14:02:16.955015 [ 7893103 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 14:02:16.955021 [ 7893103 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000563 sec
2025.10.29 14:02:16.978354 [ 7893127 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 68.01 MiB to 377.13 MiB
2025.10.29 14:02:16.984531 [ 7893103 ] {} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.29 14:02:16.984726 [ 7893103 ] {} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 14:02:16.984999 [ 7893103 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.29 14:02:16.989276 [ 7893103 ] {} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 14:02:16.991674 [ 7893103 ] {} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 14:02:16.991683 [ 7893103 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 14:02:16.991687 [ 7893103 ] {} <Information> TablesLoader: Parsed metadata of 8 tables in 3 databases in 0.006677833 sec
2025.10.29 14:02:16.992660 [ 7893103 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.29 14:02:16.993086 [ 7893103 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.29 14:02:16.993146 [ 7893103 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.29 14:02:16.993171 [ 7893103 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.29 14:02:16.996643 [ 7893103 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 14:02:16.996651 [ 7893103 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 14:02:16.999391 [ 7893103 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.29 14:02:16.999410 [ 7893103 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.29 14:02:16.999411 [ 7893103 ] {} <Information> Application: Ready for connections.
2025.10.29 17:39:33.748386 [ 7893119 ] {} <Information> Application: Received termination signal (Terminated: 15)
2025.10.29 17:39:34.222361 [ 7893103 ] {} <Information> Application: Closed all listening sockets.
2025.10.29 17:39:34.222837 [ 7893103 ] {} <Information> Application: Closed connections.
2025.10.29 17:39:34.223902 [ 7893103 ] {} <Information> Application: Stopping AsyncLoader.
2025.10.29 17:39:34.227412 [ 7893103 ] {} <Information> Application: Shutting down storages.
2025.10.29 17:39:34.333474 [ 7893103 ] {} <Information> Context: Shutdown disk default
2025.10.29 17:39:34.393452 [ 7893103 ] {} <Information> Application: Waiting for background threads
2025.10.29 17:39:34.452852 [ 7893103 ] {} <Information> Application: Background threads finished in 58 ms
2025.10.29 17:39:34.455575 [ 7893103 ] {} <Information> Application: shutting down
2025.10.29 17:39:34.456499 [ 7893119 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 17:42:11.780208 [ 8148837 ] {} <Information> Application: Will watch for the process with pid 851
2025.10.29 17:42:11.780656 [ 8148860 ] {} <Information> Application: Forked a child process to watch
2025.10.29 17:42:11.780896 [ 8148860 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 851
2025.10.29 17:42:11.781320 [ 8148860 ] {} <Information> Application: starting up
2025.10.29 17:42:11.781591 [ 8148860 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 17:42:11.865840 [ 8148860 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 17:42:11.865850 [ 8148860 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 17:42:11.867972 [ 8148860 ] {} <Information> StatusFile: Writing pid 851 to ./data/status
2025.10.29 17:42:11.873967 [ 8148860 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.29 17:42:11.874503 [ 8148860 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.29 17:42:11.899006 [ 8148860 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.29 17:42:11.900322 [ 8148860 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 17:42:11.900724 [ 8148860 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 17:42:11.901303 [ 8148860 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 17:42:11.901306 [ 8148860 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 17:42:11.906502 [ 8148860 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.29 17:42:11.906517 [ 8148860 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.29 17:42:11.906518 [ 8148860 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.29 17:42:11.909490 [ 8148860 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.29 17:42:11.909492 [ 8148860 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.29 17:42:11.909493 [ 8148860 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.29 17:42:11.909493 [ 8148860 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.29 17:42:11.909668 [ 8148860 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.29 17:42:11.909816 [ 8148860 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 17:42:11.910294 [ 8148860 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 17:42:11.910703 [ 8148860 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 17:42:11.912609 [ 8148860 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 17:42:11.912611 [ 8148860 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 17:42:11.924575 [ 8148860 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.29 17:42:11.924680 [ 8148860 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.29 17:42:11.925064 [ 8148860 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.29 17:42:11.925327 [ 8148860 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.29 17:42:11.926674 [ 8148860 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.29 17:42:11.926684 [ 8148860 ] {} <Information> Application: Loading metadata from ./data/
2025.10.29 17:42:11.927798 [ 8148860 ] {} <Information> Context: Database disk name: default
2025.10.29 17:42:11.927801 [ 8148860 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.29 17:42:11.935479 [ 8148860 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.29 17:42:11.937131 [ 8148860 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 17:42:11.937136 [ 8148860 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000286792 sec
2025.10.29 17:42:11.966136 [ 8148860 ] {} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.29 17:42:11.966298 [ 8148860 ] {} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 17:42:11.966553 [ 8148860 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.29 17:42:11.969366 [ 8148860 ] {} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 17:42:11.971205 [ 8148860 ] {} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 17:42:11.971213 [ 8148860 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 17:42:11.971217 [ 8148860 ] {} <Information> TablesLoader: Parsed metadata of 8 tables in 3 databases in 0.00465575 sec
2025.10.29 17:42:11.971644 [ 8148860 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.29 17:42:11.971907 [ 8148860 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.29 17:42:11.971956 [ 8148860 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.29 17:42:11.971960 [ 8148860 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.29 17:42:11.973644 [ 8148860 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 17:42:11.973651 [ 8148860 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 17:42:11.975816 [ 8148860 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.29 17:42:11.975835 [ 8148860 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.29 17:42:11.975837 [ 8148860 ] {} <Information> Application: Ready for connections.
2025.10.29 17:42:11.979690 [ 8148870 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 73.46 MiB to 396.06 MiB
2025.10.29 17:51:02.410024 [ 8148865 ] {} <Information> Application: Received termination signal (Terminated: 15)
2025.10.29 17:51:02.633961 [ 8148860 ] {} <Information> Application: Closed all listening sockets.
2025.10.29 17:51:02.633981 [ 8148860 ] {} <Information> Application: Closed connections.
2025.10.29 17:51:02.634586 [ 8148860 ] {} <Information> Application: Stopping AsyncLoader.
2025.10.29 17:51:02.636168 [ 8148860 ] {} <Information> Application: Shutting down storages.
2025.10.29 17:51:02.661040 [ 8148860 ] {} <Information> Context: Shutdown disk default
2025.10.29 17:51:02.672511 [ 8148860 ] {} <Information> Application: Waiting for background threads
2025.10.29 17:51:02.708972 [ 8148860 ] {} <Information> Application: Background threads finished in 36 ms
2025.10.29 17:51:02.710803 [ 8148860 ] {} <Information> Application: shutting down
2025.10.29 17:51:02.711934 [ 8148865 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 18:48:45.158307 [ 8170804 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 2497
2025.10.29 18:48:45.158503 [ 8170804 ] {} <Information> Application: starting up
2025.10.29 18:48:45.159452 [ 8170804 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 18:48:45.235537 [ 8170804 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 18:48:45.235550 [ 8170804 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 18:48:45.237837 [ 8170804 ] {} <Information> StatusFile: Writing pid 2497 to ./data/status
2025.10.29 18:48:45.245350 [ 8170804 ] {} <Information> MemoryWorker: Starting background memory thread with period of 100ms, using Jemalloc as source
2025.10.29 18:48:45.245978 [ 8170804 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.10.29 18:48:45.273403 [ 8170804 ] {} <Warning> Context: Maximum number of threads is lower than 30000. There could be problems with handling a lot of simultaneous queries.
2025.10.29 18:48:45.274377 [ 8170804 ] {} <Information> Application: Lowered mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 18:48:45.274758 [ 8170804 ] {} <Information> Application: Lowered primary index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 18:48:45.275004 [ 8170804 ] {} <Information> Application: Lowered index mark cache size to 4.00 GiB because the system has limited RAM
2025.10.29 18:48:45.275010 [ 8170804 ] {} <Information> Application: Lowered vector similarity index cache size to 4.00 GiB because the system has limited RAM
2025.10.29 18:48:45.279037 [ 8170804 ] {} <Information> Application: Changed setting 'max_server_memory_usage' to 7.20 GiB (8.00 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio)
2025.10.29 18:48:45.279212 [ 8170804 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 4.00 GiB (8.00 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.10.29 18:48:45.279218 [ 8170804 ] {} <Information> Application: Merges and mutations memory limit is set to 4.00 GiB
2025.10.29 18:48:45.281316 [ 8170804 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.10.29 18:48:45.281322 [ 8170804 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.10.29 18:48:45.281323 [ 8170804 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.10.29 18:48:45.281324 [ 8170804 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.10.29 18:48:45.281630 [ 8170804 ] {} <Information> Application: ConcurrencyControl limit is set to UNLIMITED CPU slots with 'fair_round_robin' scheduler
2025.10.29 18:48:45.281772 [ 8170804 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 18:48:45.282611 [ 8170804 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 18:48:45.283248 [ 8170804 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.10.29 18:48:45.285922 [ 8170804 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 18:48:45.285929 [ 8170804 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 18:48:45.314886 [ 8170804 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.10.29 18:48:45.315067 [ 8170804 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.10.29 18:48:45.315427 [ 8170804 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.10.29 18:48:45.315528 [ 8170804 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.10.29 18:48:45.318456 [ 8170804 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.10.29 18:48:45.318492 [ 8170804 ] {} <Information> Application: Loading metadata from ./data/
2025.10.29 18:48:45.320517 [ 8170804 ] {} <Information> Context: Database disk name: default
2025.10.29 18:48:45.320527 [ 8170804 ] {} <Information> Context: Database disk name: default, path: ./data/
2025.10.29 18:48:45.327204 [ 8170804 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path ./data/
2025.10.29 18:48:45.329094 [ 8170804 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 18:48:45.329103 [ 8170804 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.000351125 sec
2025.10.29 18:48:45.353198 [ 8170835 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 68.01 MiB to 377.13 MiB
2025.10.29 18:48:45.366569 [ 8170804 ] {} <Information> DatabaseAtomic (argo_capital): Metadata disk default, path ./data/
2025.10.29 18:48:45.366831 [ 8170804 ] {} <Information> DatabaseAtomic (argocapital): Metadata disk default, path ./data/
2025.10.29 18:48:45.367105 [ 8170804 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path ./data/
2025.10.29 18:48:45.369934 [ 8170804 ] {} <Information> DatabaseAtomic (argo_capital): Metadata processed, database argo_capital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 18:48:45.371861 [ 8170804 ] {} <Information> DatabaseAtomic (argocapital): Metadata processed, database argocapital has 4 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 18:48:45.371870 [ 8170804 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.10.29 18:48:45.371874 [ 8170804 ] {} <Information> TablesLoader: Parsed metadata of 8 tables in 3 databases in 0.004757959 sec
2025.10.29 18:48:45.372321 [ 8170804 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.10.29 18:48:45.372585 [ 8170804 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/user_defined/
2025.10.29 18:48:45.372627 [ 8170804 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /Users/dylanneuenschwander/projects/ARGO-Master-Unified/70database/clickhouse/data/workload/
2025.10.29 18:48:45.372631 [ 8170804 ] {} <Information> Application: TaskStats is not implemented for this OS. IO accounting will be disabled.
2025.10.29 18:48:45.374575 [ 8170804 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 18:48:45.374587 [ 8170804 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.10.29 18:48:45.377297 [ 8170804 ] {} <Information> Application: Listening for http://127.0.0.1:8231
2025.10.29 18:48:45.377313 [ 8170804 ] {} <Information> Application: Listening for native protocol (tcp): 127.0.0.1:9009
2025.10.29 18:48:45.377314 [ 8170804 ] {} <Information> Application: Ready for connections.
2025.10.29 18:50:01.137560 [ 8174615 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 3551
2025.10.29 18:50:01.137732 [ 8174615 ] {} <Information> Application: starting up
2025.10.29 18:50:01.137930 [ 8174615 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 18:50:01.222647 [ 8174615 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 18:50:01.222665 [ 8174615 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 18:50:01.224758 [ 8174615 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 2497
Started at: 2025-10-29 18:48:45
Revision: 54505

2025.10.29 18:50:01.228027 [ 8174615 ] {} <Information> Application: Shutting down storages.
2025.10.29 18:50:01.231183 [ 8174615 ] {} <Information> Application: Waiting for background threads
2025.10.29 18:50:01.231463 [ 8174615 ] {} <Information> Application: Background threads finished in 0 ms
2025.10.29 18:50:01.460290 [ 8174615 ] {} <Error> Application: Code: 76. DB::Exception: Cannot lock file ./data/status. Another server instance in same directory is already running. (CANNOT_OPEN_FILE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x0000000114ef23bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010998f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x00000001045764d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000001045760e8
4. DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x00000001051fc47c
5. DB::StatusFile::StatusFile(String, std::function<void (DB::WriteBuffer&)>) @ 0x0000000109aab258
6. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000109dd36bc
7. Poco::Util::Application::run() @ 0x0000000114fea8bc
8. DB::Server::run() @ 0x0000000109dcd560
9. mainEntryClickHouseServer(int, char**) @ 0x0000000109dcaec8
10. main @ 0x000000010456f81c
11. start @ 0x0000000185e45d54
 (version 25.9.4.58 (official build))
2025.10.29 18:50:01.460493 [ 8174615 ] {} <Information> Application: shutting down
2025.10.29 18:50:01.460572 [ 8174627 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.10.29 18:52:01.232765 [ 8179877 ] {} <Information> Application: Starting ClickHouse 25.9.4.58 (revision: 54505, git hash: 08afb4f28eefe01513442c3647a2e00b703d5922, build id: <unknown>), PID 5472
2025.10.29 18:52:01.233043 [ 8179877 ] {} <Information> Application: starting up
2025.10.29 18:52:01.233227 [ 8179877 ] {} <Information> Application: OS name: Darwin, version: 25.0.0, architecture: arm64
2025.10.29 18:52:01.304607 [ 8179877 ] {} <Information> Application: Available RAM: 8.00 GiB; logical cores: 8; used cores: 8.
2025.10.29 18:52:01.304614 [ 8179877 ] {} <Information> Application: Query Profiler and TraceCollector are disabled because they require PHDR cache to be created (otherwise the function 'dl_iterate_phdr' is not lock free and not async-signal safe).
2025.10.29 18:52:01.306459 [ 8179877 ] {} <Information> StatusFile: Status file ./data/status already exists - unclean restart. Contents:
PID: 2497
Started at: 2025-10-29 18:48:45
Revision: 54505

2025.10.29 18:52:01.309061 [ 8179877 ] {} <Information> Application: Shutting down storages.
2025.10.29 18:52:01.310080 [ 8179877 ] {} <Information> Application: Waiting for background threads
2025.10.29 18:52:01.310230 [ 8179877 ] {} <Information> Application: Background threads finished in 0 ms
2025.10.29 18:52:01.629738 [ 8179877 ] {} <Error> Application: Code: 76. DB::Exception: Cannot lock file ./data/status. Another server instance in same directory is already running. (CANNOT_OPEN_FILE), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(String const&, int) @ 0x00000001117c23bc
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000010625f52c
2. DB::Exception::Exception(String&&, int, String, bool) @ 0x0000000100e464d8
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000100e460e8
4. DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x0000000101acc47c
5. DB::StatusFile::StatusFile(String, std::function<void (DB::WriteBuffer&)>) @ 0x000000010637b258
6. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x00000001066a36bc
7. Poco::Util::Application::run() @ 0x00000001118ba8bc
8. DB::Server::run() @ 0x000000010669d560
9. mainEntryClickHouseServer(int, char**) @ 0x000000010669aec8
10. main @ 0x0000000100e3f81c
11. start @ 0x0000000185e45d54
 (version 25.9.4.58 (official build))
2025.10.29 18:52:01.630208 [ 8179877 ] {} <Information> Application: shutting down
2025.10.29 18:52:01.630410 [ 8179904 ] {} <Information> BaseDaemon: Stop SignalListener thread
